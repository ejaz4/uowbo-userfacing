// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Guilds {
  id                  String             @id @default(uuid())
  guildId             String             @unique
  guildName           String
  guildIcon           String?
  members             GuildUser[]
  settings            GuildSettings[]
  backgroundImage     String?
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  authorityHits       AuthorityHit[]
  GuildLog            GuildLog[]
  DiscordUniversity   DiscordUniversity? @relation(fields: [discordUniversityId], references: [id])
  discordUniversityId String?
}

model GuildLog {
  id        String   @id @default(uuid())
  message   String
  createdAt DateTime @default(now())
  Guilds    Guilds?  @relation(fields: [guildsId], references: [id])
  guildsId  String?
}

model GuildSettings {
  id String @id @default(uuid())

  allowsEmailEntry     Boolean @default(false)
  allowsBiometricEntry Boolean @default(false)
  allowsExternalEntry  Boolean @default(true)

  verifiedRoleId  String?
  moderatorRoleId String?
  usesUowboNet    Boolean @default(true)

  Guilds   Guilds @relation(fields: [guildsId], references: [id])
  guildsId String
}

model GuildUser {
  id       String  @id @default(uuid())
  Guilds   Guilds? @relation(fields: [guildsId], references: [id], onDelete: Cascade)
  guildsId String?

  DiscordUser   DiscordUser? @relation(fields: [discordUserId], references: [id], onDelete: Cascade)
  discordUserId String?

  isMod   Boolean @default(false)
  isOwner Boolean @default(false)

  messages GuildMessage[]

  @@unique([guildsId, discordUserId])
}

model GuildMessage {
  id String @id

  message String?

  mentions        GuildMessage[] @relation("mention")
  parentMessage   GuildMessage?  @relation("mention", fields: [parentMessageId], references: [id])
  parentMessageId String?

  GuildUser   GuildUser? @relation(fields: [guildUserId], references: [id])
  guildUserId String?

  attachmentUrl String?

  createdAt DateTime @default(now())
}

model DiscordUser {
  id        String              @id @default(uuid())
  discordId String              @unique
  avatar    String?
  username  String
  tokens    Token[]
  guilds    GuildUser[]
  link      DiscordUniversity[]
  Handover  Handover[]
  createdAt DateTime            @default(now())
}

model Token {
  id            String       @id @default(uuid())
  token         String       @unique
  createdAt     DateTime     @default(now())
  DiscordUser   DiscordUser? @relation(fields: [discordUserId], references: [id])
  discordUserId String?
}

model DiscordUniversity {
  id String @id @default(uuid())

  // The user
  DiscordUser   DiscordUser? @relation(fields: [discordUserId], references: [id], onDelete: Cascade)
  discordUserId String?

  // Their email verification methods
  emailVerification   EmailVerification? @relation(fields: [emailVerificationId], references: [id], onDelete: SetNull)
  emailVerificationId String?
  emailCode           String?

  // Their biometric methods
  BiometricEntry   BiometricEntry? @relation(fields: [biometricEntryId], references: [id], onDelete: SetNull)
  biometricEntryId String?

  externalsHelped DiscordUniversity[] @relation("helper")
  helper          DiscordUniversity?  @relation("helper", fields: [helperId], references: [id])
  helperId        String?
  helperCode      String?

  studentId  String? @unique
  isVerified Boolean @default(false)

  authorityHits AuthorityHit[]
  Guilds        Guilds[]
}

model AuthorityHit {
  id String @id @default(uuid())

  DiscordUniversity   DiscordUniversity? @relation(fields: [discordUniversityId], references: [id], onDelete: Cascade)
  discordUniversityId String?
  Guilds              Guilds?            @relation(fields: [guildsId], references: [id], onDelete: SetNull)
  guildsId            String?

  federated Federated @default(NOT_FEDERATED)

  reason String
  type   HitType @default(STRIKE)

  createdAt DateTime @default(now())
}

enum Federated {
  NOT_FEDERATED
  SUBMITTED
  ACCEPTED
  REJECTED
}

enum HitType {
  STRIKE
  PARDON
}

model EmailVerification {
  id         String              @id @default(uuid())
  email      String              @unique
  link       DiscordUniversity[]
  isVerified Boolean             @default(true)
}

model Handover {
  id            String       @id @default(uuid())
  token         String       @default(uuid())
  DiscordUser   DiscordUser? @relation(fields: [discordUserId], references: [id])
  discordUserId String?
  isVerified    Boolean      @default(false)
  code          String?
}

model BiometricEntry {
  id           String              @id @default(uuid())
  universityID String
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt
  link         DiscordUniversity[]
}
